global:
    defaultStorageClass: nfs-client
notifications:
    enabled: true
server:
    config:
        kustomize.buildOptions: --enable-alpha-plugins --enable-exec
    ingress:
        enabled: true
        hostname: argocd.comintern.local
        ## e.g:
        ## annotations:
        ##   kubernetes.io/ingress.class: nginx
        ##   cert-manager.io/cluster-issuer: cluster-issuer-name
        ##
        annotations:
            kubernetes.io/ingress.class: nginx
            cert-manager.io/cluster-issuer: selfsigned-issuer
            nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        ## Enable TLS configuration for the hostname defined at ingress.hostname parameter
        ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
        ## You can use the ingress.secrets parameter to create this TLS secret or rely on cert-manager to create it
        ##
        tls: false
        ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
        ## ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
        ##
        ingressClassName: nginx
dex:
    enabled: false
config:
    ## @param config.knownHosts [string] Known hosts to be added to the known hosts list by default. Check the values to see the default value
    ##
    knownHosts: |
        bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
        github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
        gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
        gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
        ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
        vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    ## @param config.tlsCerts TLS certificates used to verify the authenticity of the repository servers
    ## Certificates will be generated by default if the values are not set.
    ## E.g:
    ## tlsCerts:
    ##   argocd-1.example.com: |
    ##     -----BEGIN CERTIFICATE-----
    ##     (...)
    ##     -----END CERTIFICATE-----
    ##   argocd-2.example.com: |
    ##     -----BEGIN CERTIFICATE-----
    ##     (...)
    ##     -----END CERTIFICATE-----
    ##
    tlsCerts: {}
    ## @param config.gpgKeys GnuPG public keys to add to the keyring
    ## Keys will be generated by default if the values are not set.
    ## Note: Public keys should be exported with `gpg --export --armor <KEY>`
    ##
    gpgKeys: {}
    # 4AEE18F83AFDEB23: |
    #   -----BEGIN PGP PUBLIC KEY BLOCK-----
    #   ...
    #   -----END PGP PUBLIC KEY BLOCK-----
    secret:
        ## @param config.secret.create Whether to create or not the secret
        ##
        create: true
        ## Annotations to be added to argocd-secret
        ## @param config.secret.annotations General secret extra annotations
        ##
        annotations: {}
        ## Webhook Configs
        ## @param config.secret.githubSecret GitHub secret to configure webhooks
        ## @param config.secret.gitlabSecret GitLab secret to configure webhooks
        ## @param config.secret.bitbucketServerSecret BitBucket secret to configure webhooks
        ## @param config.secret.bitbucketUUID BitBucket UUID to configure webhooks
        ## @param config.secret.gogsSecret Gogs secret to configure webhooks
        ##
        githubSecret: ""
        gitlabSecret: ""
        bitbucketServerSecret: ""
        bitbucketUUID: ""
        gogsSecret: ""
        ## Extra keys to add to the general config secret. Useful for injecting SSO secrets into environment variables.
        ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sso
        ## @param config.secret.extra Extra keys to add to the configuration secret.
        ## All values must be non-empty.
        ## E.g:
        ##  LDAP_PASSWORD: "mypassword"
        ##
        extra: {}
        ## Argo CD TLS Data.
        ## @param config.secret.argocdServerTlsConfig.key TLS key for the Argo CD config secret
        ## @param config.secret.argocdServerTlsConfig.crt TLS certificate for the Argo CD config secret
        ## E.g:
        ##   key:
        ##   crt: |
        ##     -----BEGIN CERTIFICATE-----
        ##     <cert data>
        ##     -----END CERTIFICATE-----
        ##     -----BEGIN CERTIFICATE-----
        ##     <ca cert data>
        ##     -----END CERTIFICATE-----
        ##
        argocdServerTlsConfig:
            key: ""
            crt: ""
        ## Argo admin password
        ## @param config.secret.argocdServerAdminPassword Argo CD server admin password. Autogenerated by default.
        ##
        argocdServerAdminPassword: ""
        ## Password modification time defaults to current time if not set
        ## @param config.secret.argocdServerAdminPasswordMtime Argo CD server password modification time
        ## E.g:
        ## argocdServerAdminPasswordMtime: "2006-01-02T15:04:05Z"
        ##
        argocdServerAdminPasswordMtime: ""
        ## Create a secret with optional repository credentials
        ## @param config.secret.repositoryCredentials Repository credentials to add to the Argo CD server confgi secret
        ## E.g.
        ## repositoryCredentials:
        ##   sample-ssh-key: |
        ##     -----BEGIN RSA KEY-----
        ##     <key content>
        ##     -----END RSA KEY-----
        ##
        repositoryCredentials: {}
        ## External Cluster Credentials
        ## Refs:
        ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/declarative-setup/#clusters
        ## - https://argo-cd.readthedocs.io/en/stable/operator-manual/security/#external-cluster-credentials
        ## @param config.clusterCredentials Configure external cluster credentials
        ## E.g
        ##  - name: mycluster
        ##   server: https://mycluster.com
        ##   labels: {}
        ##   annotations: {}
        ##   config:
        ##     bearerToken: "<authentication token>"
        ##     tlsClientConfig:
        ##       insecure: false
        ##       caData: "<base64 encoded certificate>"
        ## - name: mycluster2
        ##   server: https://mycluster2.com
        ##   labels: {}
        ##   annotations: {}
        ##   namespaces: namespace1,namespace2
        ##   config:
        ##     bearerToken: "<authentication token>"
        ##     tlsClientConfig:
        ##       insecure: false
        ##       caData: "<base64 encoded certificate>"
        ##
        clusterCredentials: []
redis:
    enabled: false
externalRedis:
    ## Can be enabled after redisWait.enabled and redis.enabled are set to false
    ## @param externalRedis.enabled Enables External Redis
    ##
    enabled: true
    ## Redis&reg; host
    ## @param externalRedis.host External Redis host
    ##
    host: redis-master
    ## Redis&reg; port
    ## @param externalRedis.port External Redis port
    ##
    port: 6379
    ## Redis&reg; password for authentication
    ## Ignored if existingSecret is set
    ## @param externalRedis.password External Redis password
    ##
    password: ""
    # password: "superSecretP@ss123"
    ## Name of existing secret object containing the password
    ## @param externalRedis.existingSecret Existing secret for the external redis
    ##
    existingSecret: ENC[AES256_GCM,data:nBb5082Tna8MCA==,iv:7e5yhUXnxYiI5yjrM6JvsG05S8uJfjlHpF++OP5aPA0=,tag:/TI5S2LgxJxawl/yr8wLzg==,type:str]
    # existingSecret: ""
    ## Password key to be retrieved from Redis&reg; secret
    ## @param externalRedis.existingSecretPasswordKey Password key for the existing secret containing the external redis password
    ##
    existingSecretPasswordKey: ENC[AES256_GCM,data:v0HLzimliZM7QUhcu+o=,iv:tshlVDdBC8y1wDKEjDWSy7bmrlWfSRhyeSWNfZy6Y3Y=,tag:yQF0akuKFeoYVoukXPSVxQ==,type:str]
    # existingSecretPasswordKey: ""
    ## Specify a label to use with the label selector
    ## @param externalRedis.selector External Redis selector labels
    ##
    selector: {}
    #
    # selector:
    # app.kubernetes.io/component: master
    # app.kubernetes.io/instance: redis
    # app.kubernetes.io/name: redis
redisWait:
    ## @param redisWait.enabled Enables waiting for redis
    ##
    enabled: false
repoServer:
    # Use init containers to configure custom tooling
    # https://argoproj.github.io/argo-cd/operator-manual/custom_tools/
    extraVolumes:
        - name: custom-tools
          emptyDir: {}
    initContainers:
        - name: install-ksops
          image: viaductoss/ksops:v4
          command:
            - /bin/sh
            - -c
          args:
            - echo "Installing KSOPS..."; mv ksops /custom-tools/; mv kustomize /custom-tools/; echo "Done.";
          volumeMounts:
            - mountPath: /custom-tools
              name: custom-tools
    extraVolumeMounts:
        - mountPath: /usr/local/bin/kustomize
          name: custom-tools
          subPath: kustomize
        - mountPath: /usr/local/bin/ksops
          name: custom-tools
          subPath: ksops
    extraEnvVarsSecret: ENC[AES256_GCM,data:74doX/0cz70WusK7,iv:n3NTDkfZCOBCJocGmledZpDrxzoXAPptl3YZwJD4UFU=,tag:x1tYOWdZMGxCqX/K1i35Cg==,type:str]
    resourcesPreset: small
controller:
    resourcesPreset: small
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age1wp7n5rlrjdqjx7hpkfv35ejwauuggyncl0cu4zllcq59a696sudqnucqfe
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBSeGoxMFZVc3FqY1N1N0hU
            cmpES3gzTlR4L3RNN3RFTVRiekk1VkpKQkQ0ClZzN2hjR2ZkTDBWQm5tdjN4ZjFa
            dnJ3VFRoZVdub0NnVm1Ib3ZYL24wbU0KLS0tIGtxRHI3c1NTOVE4MVM1YVV2NW13
            L2Z3cjFScXNLSURkRS9IV0Z4eWtKcEkKuuVwDDGpTbXXvZ8QZzMU3j26E7k8toEn
            +lco+Ch4vFA+HhzMy4zwBKL+jI7skBsO4jhHAP7fTZ5L2uFJnpBL2g==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2025-09-22T19:16:55Z"
    mac: ENC[AES256_GCM,data:9p2nVvtFE4s5OW94s7pAiRiUn8Mvizalgz87zSve6G8geQVMJsbhKKzzhPmpNFeNBbeH3wMxZ49xtZfo9GEYbDby95TSA0hkMOdax7SpiwtxHeXndmY2+Jizb4rXHv5HeCcj4DfjXAAE4X2qBkL4HwF8Rb4pIEXJz8rheQQQzPA=,iv:I1pGHFR8hfMTG11LytiDefBNVtpuoKybPb8Z8pXlkmw=,tag:ja6ES/7H95uwMo9IbE7kOg==,type:str]
    pgp: []
    encrypted_regex: ^(SOPS_AGE_KEY|.*password.*|.*PASSWORD.*|.*Secret.*|email|.*USERNAME.*|MIKROTIK_BASEURL|access-token)$
    version: 3.7.1
