pipeline {
    agent { label 'k8s'}
    environment {        
        API_SERVER = "https://${params.K8S_API_HOST}:${params.K8S_API_PORT}"
        CLUSTER_NAME = "${params.K8S_CLUSTER}"
        CONTEXT_NAME = "${params.K8S_CONTEXT}"
        CHART_DIR = "${params.HELM_CHART_DIR}"
        HELM_VERSION="v3.13.2"
        HELM_URL ="https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz"
        HELM_REPO_NAME = "${params.HELM_REPO_NAME}"
        HELM_REPO_URL = "${params.HELM_REPO_URL}"
        HELM_RELEASE_NAME = "${params.HELM_RELEASE_NAME}"
        HELM_CHART_NAME ="${params.HELM_CHART_NAME}"
        HELM_CHART_VERSION="${params.HELM_CHART_VERSION}"
        NAMESPACE = "${params.K8S_NAMESPACE}"
        VALUES_URL = "${params.VALUES_URL}"
        // REDIS_PASSWORD = "${params.REDIS_PASSWORD}"
        DEPLOYMENT_CONFIG="main.yaml"
        DEPLOYMENT_BRANCH="main"
        APPS_DIR="apps"
    }
    stages {
        stage('Install Helm') {
            when {
                changeset "**/${env.CHART_DIR}/**"
            }
            steps {
                sh """
                if ! command -v helm &> /dev/null; then
                    echo "Helm not found, installing..."
                    mkdir -p $HOME/.local/bin
                    curl -fsSL $HELM_URL | tar -xz --strip-components=1 -C $HOME/.local/bin linux-amd64/helm
                    chmod +x $HOME/.local/bin/helm
                    echo "Helm installed in $HOME/.local/bin"
                else
                    echo "Helm already installed."
                fi
                
                export PATH="$HOME/.local/bin:$PATH"
                helm version
                """
            }
        }
        stage('Prepare Kubernetes') {
            when {
                changeset "**/${env.CHART_DIR}/**"
            }
            steps {                
                withCredentials([string(credentialsId: 'K8S_JENKINS_TOKEN', variable: 'K8S_TOKEN')]) {
                    sh """
                        kubectl config set-cluster ${CLUSTER_NAME} --server=${API_SERVER} --insecure-skip-tls-verify=true
                        kubectl config set-credentials jenkins --token=${K8S_TOKEN}
                        kubectl config set-context ${CONTEXT_NAME} --cluster=${CLUSTER_NAME} --user=jenkins
                        kubectl config use-context ${CONTEXT_NAME}                       
                    """
                }
            }
        }
        stage('Deploy Chart') {
            when {
                allOf {
                    branch env.DEPLOYMENT_BRANCH
                    changeset "**/${env.CHART_DIR}/*values*.yaml"
                }
            }
            steps {
                withCredentials([string(credentialsId: 'K8S_JENKINS_TOKEN', variable: 'K8S_TOKEN')]) {
                    dir("${env.CHART_DIR}") {
                        sh """
                            helm repo add ${env.HELM_REPO_NAME} ${env.HELM_REPO_URL} 
                            helm repo update
                            helm upgrade --install ${env.HELM_RELEASE_NAME} ${env.HELM_CHART_NAME} \
                            --namespace ${env.NAMESPACE} --version ${env.HELM_CHART_VERSION} --create-namespace -f ${VALUES_URL} \
                            | tee helm-deploy.log
                        """
                        archiveArtifacts artifacts: "helm-deploy.log", fingerprint: true
                    }
                }
            }
        }
        stage('Apply config') {
            when {
                allOf {
                    branch env.DEPLOYMENT_BRANCH
                    changeset "**/${env.CHART_DIR}/${env.DEPLOYMENT_CONFIG}"
                }
            }
            steps {
                dir("${env.CHART_DIR}") {
                    sh """
                        export PATH="$HOME/.local/bin:$PATH"
                        kubectl apply -f ${env.DEPLOYMENT_CONFIG} -n ${env.NAMESPACE} \
                        | tee apply-manifest.log
                    """
                    archiveArtifacts artifacts: "apply-manifest.log", fingerprint: true
                }
            }
        }
        stage('Apply apps') {
            when {
                allOf {
                    branch env.DEPLOYMENT_BRANCH
                    changeset "**/${env.APPS_DIR}/*.yaml"
                }
            }
            steps {
                dir("${env.APPS_DIR}") {
                    sh """
                        export PATH="$HOME/.local/bin:$PATH"
                        kubectl apply -f *.yaml -n ${env.NAMESPACE} \
                        | tee apply-apps.log
                    """
                    archiveArtifacts artifacts: "apply-apps.log", fingerprint: true
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
